{
    "openapi": "3.1.0",
    "info": {
        "title": "Tesser FX Quote & Payment API",
        "version": "1.0.0",
        "description": "Two-call workflow: (1) obtain a locked FX quote, (2) submit a payment that consumes it.\nDesign follows bank-grade patterns: versioned base path, event envelope, idempotency keys, cursor-based pagination, and predictive rate-limit headers."
    },
    "servers": [
        {
            "url": "https://api.tesser.com/v1"
        }
    ],
    "security": [
        {
            "BearerAuth": []
        }
    ],
    "paths": {
        "/quotes": {
            "post": {
                "summary": "Obtain a locked FX quote",
                "description": "Exactly one of `from_amount` or `to_amount` is required.  A `quote_id` inside the response must be supplied to **POST /payments** within `valid_until`.",
                "tags": [
                    "Quote"
                ],
                "operationId": "createQuote",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/IdempotencyKey"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/QuoteRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "$ref": "#/components/responses/EventQuote"
                    },
                    "400": {
                        "$ref": "#/components/responses/Error"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthError"
                    },
                    "409": {
                        "$ref": "#/components/responses/Conflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/RateLimit"
                    }
                }
            }
        },
        "/payments": {
            "post": {
                "summary": "Submit a payment using a quote",
                "tags": [
                    "Payment"
                ],
                "operationId": "submitPayment",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/IdempotencyKey"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PaymentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "$ref": "#/components/responses/EventPayment"
                    },
                    "400": {
                        "$ref": "#/components/responses/Error"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthError"
                    },
                    "409": {
                        "$ref": "#/components/responses/Conflict"
                    },
                    "422": {
                        "$ref": "#/components/responses/Unprocessable"
                    },
                    "429": {
                        "$ref": "#/components/responses/RateLimit"
                    }
                }
            }
        }
    },
    "components": {
        "securitySchemes": {
            "BearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "API_KEY"
            }
        },
        "parameters": {
            "IdempotencyKey": {
                "in": "header",
                "name": "Idempotency-Key",
                "description": "A unique value (max 255 bytes) that makes the request idempotent for 24 h.",
                "required": false,
                "schema": {
                    "type": "string",
                    "maxLength": 255
                }
            },
            "PageSize": {
                "in": "query",
                "name": "page_size",
                "description": "Max records per page (default 50, max 200).",
                "required": false,
                "schema": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 200
                }
            },
            "Cursor": {
                "in": "query",
                "name": "cursor",
                "description": "Opaque pagination cursor returned by previous call.",
                "required": false,
                "schema": {
                    "type": "string"
                }
            }
        },
        "schemas": {
            "UnixTime": {
                "type": "integer",
                "example": 1719878400
            },
            "Amount": {
                "type": "string",
                "pattern": "^[0-9]+(\\.[0-9]{1,18})?$",
                "example": "1000.00"
            },
            "QuoteRequest": {
                "type": "object",
                "required": [
                    "to_currency"
                ],
                "properties": {
                    "client_quote_id": {
                        "type": "string"
                    },
                    "from_currency": {
                        "type": "string",
                        "example": "USDC"
                    },
                    "to_currency": {
                        "type": "string",
                        "example": "EUR"
                    },
                    "from_amount": {
                        "$ref": "#/components/schemas/Amount"
                    },
                    "to_amount": {
                        "$ref": "#/components/schemas/Amount"
                    },
                    "quote_time": {
                        "$ref": "#/components/schemas/UnixTime"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "compliance": {
                        "type": "object"
                    }
                },
                "oneOf": [
                    {
                        "required": [
                            "from_amount"
                        ]
                    },
                    {
                        "required": [
                            "to_amount"
                        ]
                    }
                ]
            },
            "QuoteData": {
                "type": "object",
                "required": [
                    "id",
                    "valid_until",
                    "quotes"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Quote ID"
                    },
                    "client_quote_id": {
                        "type": "string"
                    },
                    "valid_until": {
                        "$ref": "#/components/schemas/UnixTime"
                    },
                    "quotes": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "required": [
                                "id",
                                "rate",
                                "settlement_period_seconds"
                            ],
                            "properties": {
                                "id": {
                                    "type": "string"
                                },
                                "rate": {
                                    "type": "number",
                                    "format": "double"
                                },
                                "settlement_period_seconds": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            },
            "PaymentRequest": {
                "type": "object",
                "required": [
                    "quote_id"
                ],
                "properties": {
                    "client_payment_id": {
                        "type": "string"
                    },
                    "quote_id": {
                        "type": "string"
                    }
                }
            },
            "PaymentData": {
                "type": "object",
                "required": [
                    "id",
                    "change_at",
                    "change"
                ],
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "client_payment_id": {
                        "type": "string"
                    },
                    "change_at": {
                        "$ref": "#/components/schemas/UnixTime"
                    },
                    "change": {
                        "type": "string",
                        "enum": [
                            "payment_created",
                            "payment_settled",
                            "payment_rejected"
                        ]
                    },
                    "reason": {
                        "type": "string"
                    }
                }
            },
            "EventEnvelope": {
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "type",
                    "data"
                ],
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "created_at": {
                        "$ref": "#/components/schemas/UnixTime"
                    },
                    "type": {
                        "type": "string"
                    },
                    "reason": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object"
                    }
                }
            },
            "Error": {
                "type": "object",
                "required": [
                    "status",
                    "error_code",
                    "message"
                ],
                "properties": {
                    "status": {
                        "type": "integer",
                        "example": 400
                    },
                    "error_code": {
                        "type": "string",
                        "example": "AmountTooSmall"
                    },
                    "message": {
                        "type": "string",
                        "example": "Amount is below minimum."
                    }
                }
            }
        },
        "responses": {
            "EventQuote": {
                "description": "Quote created",
                "headers": {
                    "$ref": "#/components/headers/RateLimit"
                },
                "content": {
                    "application/json": {
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/EventEnvelope"
                                },
                                {
                                    "properties": {
                                        "type": {
                                            "const": "quote.created"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/QuoteData"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "EventPayment": {
                "description": "Payment event (created / settled / rejected)",
                "headers": {
                    "$ref": "#/components/headers/RateLimit"
                },
                "content": {
                    "application/json": {
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/EventEnvelope"
                                },
                                {
                                    "properties": {
                                        "type": {
                                            "enum": [
                                                "payment.created",
                                                "payment.settled",
                                                "payment.rejected"
                                            ]
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/PaymentData"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "Error": {
                "description": "Validation or business error",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Error"
                        }
                    }
                }
            },
            "AuthError": {
                "description": "Authentication required / invalid",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Error"
                        }
                    }
                }
            },
            "Conflict": {
                "description": "Resource conflict (e.g., quote already used)",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Error"
                        }
                    }
                }
            },
            "Unprocessable": {
                "description": "Semantic validation failed (e.g., BalanceInsufficient)",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Error"
                        }
                    }
                }
            },
            "RateLimit": {
                "description": "Too many requests",
                "headers": {
                    "$ref": "#/components/headers/RetryAfter"
                },
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Error"
                        }
                    }
                }
            }
        },
        "headers": {
            "RateLimit": {
                "X-RateLimit-Limit": {
                    "description": "Total request quota per time-window.",
                    "schema": {
                        "type": "integer"
                    }
                },
                "X-RateLimit-Remaining": {
                    "description": "Remaining calls in the current window.",
                    "schema": {
                        "type": "integer"
                    }
                }
            },
            "RetryAfter": {
                "Retry-After": {
                    "description": "Seconds until the client may retry.",
                    "schema": {
                        "type": "integer"
                    }
                }
            }
        }
    }
}